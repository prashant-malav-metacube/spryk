spryk: wrapper
description: "Adds CRUD code for a Domain Entity."
priority: 1
mode: both
level: 2

arguments:
    organization:
        inherit: true
        default: Spryker

    module:
        inherit: true
        default: FooBar

    domainEntity: ~

excludedSpryks:
    - AddZedPresentationTwig
    - AddZedNavigationNode

preSpryks:
    - AddModule

postSpryks:
    - AddZedDomainEntityDeleter
    - AddZedDomainEntityCreator
    # Add add{{ domainEntity }}CreatePreSavePlugins, get{{ domainEntity }}CreatePreSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}CreatePreSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PreSavePluginInterface[]"

    # Add add{{ domainEntity }}CreatePostSavePlugins, get{{ domainEntity }}CreatePostSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}CreatePostSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PostSavePluginInterface[]"

    # Add add{{ domainEntity }}UpdatePreSavePlugins, get{{ domainEntity }}UpdatePreSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdatePreSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PreSavePluginInterface[]"

    # Add add{{ domainEntity }}UpdatePostSavePlugins, get{{ domainEntity }}UpdatePostSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdatePostSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}PostSavePluginInterface[]"

    # Add add{{ domainEntity }}ExpanderPlugins, get{{ domainEntity }}ExpanderPlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}Expander"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Expander\\{{ domainEntity }}ExpanderPluginInterface[]"

    # Add add{{ domainEntity }}UpdateValidatorRulePlugins, get{{ domainEntity }}UpdateValidatorRulePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdateValidatorRule"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"

    # Add add{{ domainEntity }}CreateValidatorRulePlugins, get{{ domainEntity }}CreateValidatorRulePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
              arguments:
                  type:
                      value: "{{ domainEntity }}CreateValidatorRule"
                  output:
                      value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"

    # Creates {{ domainEntity }}ExpanderPluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}ExpanderPlugin"
              subDirectory:
                  value: "{{ domainEntity }}/Expander"
              modelMethod:
                  value: "expand"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity }}Transfers"
              output:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"

    # Creates {{ domainEntity }}PreSavePluginInterface
    -   AddDomainEntityExtensionInterfaceMethod:
                arguments:
                    className:
                        value: "{{ domainEntity }}PreSavePlugin"
                    subDirectory:
                        value: "{{ domainEntity }}/Saver"
                    modelMethod:
                        value: "process"
                    input:
                        value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity }}Transfers"
                    output:
                        value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"

    # Creates {{ domainEntity }}PostSavePluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}PostSavePlugin"
              subDirectory:
                  value: "{{ domainEntity }}/Saver"
              modelMethod:
                  value: "process"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity }}Transfers"
              output:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"

    # Creates {{ domainEntity }}ValidatorRulePluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}ValidatorRulePlugin"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              modelMethod:
                  value: "validate"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity }}Transfer"
              output:
                  value: "array"
